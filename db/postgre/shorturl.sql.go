// Code generated by sqlc. DO NOT EDIT.
// source: shorturl.sql

package db

import (
	"context"
	"database/sql"
)

const createShortUrl = `-- name: CreateShortUrl :exec
INSERT INTO
    shorturl (origin, short)
VALUES
    ($1,$2)
`

type CreateShortUrlParams struct {
	Origin sql.NullString `json:"origin"`
	Short  sql.NullString `json:"short"`
}

func (q *Queries) CreateShortUrl(ctx context.Context, arg CreateShortUrlParams) error {
	_, err := q.exec(ctx, q.createShortUrlStmt, createShortUrl, arg.Origin, arg.Short)
	return err
}

const deleteShortUrl = `-- name: DeleteShortUrl :exec
DELETE FROM shorturl WHERE id = $1
`

func (q *Queries) DeleteShortUrl(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteShortUrlStmt, deleteShortUrl, id)
	return err
}

const getShortUrl = `-- name: GetShortUrl :one
SELECT id, origin, short, hits, created_at FROM shorturl
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShortUrl(ctx context.Context, id int32) (Shorturl, error) {
	row := q.queryRow(ctx, q.getShortUrlStmt, getShortUrl, id)
	var i Shorturl
	err := row.Scan(
		&i.ID,
		&i.Origin,
		&i.Short,
		&i.Hits,
		&i.CreatedAt,
	)
	return i, err
}

const listShortUrl = `-- name: ListShortUrl :many
SELECT id, origin, short, hits, created_at FROM shorturl
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListShortUrlParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShortUrl(ctx context.Context, arg ListShortUrlParams) ([]Shorturl, error) {
	rows, err := q.query(ctx, q.listShortUrlStmt, listShortUrl, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shorturl
	for rows.Next() {
		var i Shorturl
		if err := rows.Scan(
			&i.ID,
			&i.Origin,
			&i.Short,
			&i.Hits,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShortUrl = `-- name: UpdateShortUrl :exec
UPDATE shorturl SET hits = $2
WHERE id = $1
`

type UpdateShortUrlParams struct {
	ID   int32         `json:"id"`
	Hits sql.NullInt64 `json:"hits"`
}

func (q *Queries) UpdateShortUrl(ctx context.Context, arg UpdateShortUrlParams) error {
	_, err := q.exec(ctx, q.updateShortUrlStmt, updateShortUrl, arg.ID, arg.Hits)
	return err
}
