// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createShortUrlStmt, err = db.PrepareContext(ctx, createShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShortUrl: %w", err)
	}
	if q.deleteShortUrlStmt, err = db.PrepareContext(ctx, deleteShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteShortUrl: %w", err)
	}
	if q.getShortUrlStmt, err = db.PrepareContext(ctx, getShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query GetShortUrl: %w", err)
	}
	if q.listShortUrlStmt, err = db.PrepareContext(ctx, listShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query ListShortUrl: %w", err)
	}
	if q.updateShortUrlStmt, err = db.PrepareContext(ctx, updateShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShortUrl: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createShortUrlStmt != nil {
		if cerr := q.createShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShortUrlStmt: %w", cerr)
		}
	}
	if q.deleteShortUrlStmt != nil {
		if cerr := q.deleteShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteShortUrlStmt: %w", cerr)
		}
	}
	if q.getShortUrlStmt != nil {
		if cerr := q.getShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShortUrlStmt: %w", cerr)
		}
	}
	if q.listShortUrlStmt != nil {
		if cerr := q.listShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listShortUrlStmt: %w", cerr)
		}
	}
	if q.updateShortUrlStmt != nil {
		if cerr := q.updateShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShortUrlStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createShortUrlStmt *sql.Stmt
	deleteShortUrlStmt *sql.Stmt
	getShortUrlStmt    *sql.Stmt
	listShortUrlStmt   *sql.Stmt
	updateShortUrlStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createShortUrlStmt: q.createShortUrlStmt,
		deleteShortUrlStmt: q.deleteShortUrlStmt,
		getShortUrlStmt:    q.getShortUrlStmt,
		listShortUrlStmt:   q.listShortUrlStmt,
		updateShortUrlStmt: q.updateShortUrlStmt,
	}
}
