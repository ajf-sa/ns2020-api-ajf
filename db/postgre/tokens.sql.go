// Code generated by sqlc. DO NOT EDIT.
// source: tokens.sql

package db

import (
	"context"
	"database/sql"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO
    tokens (key, user_id)
VALUES
    ($1,$2)
`

type CreateTokenParams struct {
	Key    sql.NullString `json:"key"`
	UserID sql.NullInt32  `json:"user_id"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.exec(ctx, q.createTokenStmt, createToken, arg.Key, arg.UserID)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteTokenStmt, deleteToken, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, key, is_active, created_at FROM tokens
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, id int32) (Token, error) {
	row := q.queryRow(ctx, q.getTokenStmt, getToken, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Key,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listToken = `-- name: ListToken :many
SELECT id, user_id, key, is_active, created_at FROM tokens
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTokenParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListToken(ctx context.Context, arg ListTokenParams) ([]Token, error) {
	rows, err := q.query(ctx, q.listTokenStmt, listToken, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Key,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens SET is_active = $2
WHERE id = $1
`

type UpdateTokenParams struct {
	ID       int32         `json:"id"`
	IsActive sql.NullInt32 `json:"is_active"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.exec(ctx, q.updateTokenStmt, updateToken, arg.ID, arg.IsActive)
	return err
}
